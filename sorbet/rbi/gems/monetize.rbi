# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/monetize/all/monetize.rbi
#
# monetize-1.9.4

class NilClass
  def to_money(currency = nil); end
end
class Numeric
  def to_money(currency = nil); end
end
class String
  def to_currency; end
  def to_money(currency = nil); end
end
class Symbol
  def to_currency; end
end
class Hash
  def to_money(currency = nil); end
end
module Monetize
  def self.assume_from_symbol; end
  def self.assume_from_symbol=(arg0); end
  def self.enforce_currency_delimiters; end
  def self.enforce_currency_delimiters=(arg0); end
  def self.extract_cents(input, currency = nil); end
  def self.from_bigdecimal(value, currency = nil); end
  def self.from_fixnum(value, currency = nil); end
  def self.from_float(value, currency = nil); end
  def self.from_integer(value, currency = nil); end
  def self.from_numeric(value, currency = nil); end
  def self.from_string(value, currency = nil); end
  def self.parse!(input, currency = nil, options = nil); end
  def self.parse(input, currency = nil, options = nil); end
  def self.parse_collection(input, currency = nil, options = nil); end
end
class Monetize::Error < StandardError
end
class Monetize::ParseError < Monetize::Error
end
class Monetize::ArgumentError < Monetize::Error
end
class Monetize::Parser
  def apply_multiplier(multiplier_exp, amount); end
  def apply_sign(negative, amount); end
  def assume_from_symbol?; end
  def compute_currency; end
  def currency_symbol_regex; end
  def extract_major_minor(num, currency); end
  def extract_major_minor_with_single_delimiter(num, currency, delimiter); end
  def extract_major_minor_with_tentative_delimiter(num, delimiter); end
  def extract_multiplier; end
  def extract_sign(input); end
  def fallback_currency; end
  def initialize(input, fallback_currency = nil, options = nil); end
  def input; end
  def options; end
  def parse; end
  def parse_currency; end
  def regex_safe_symbols; end
  def split_major_minor(num, delimiter); end
end
class Monetize::Collection
  def [](*args, &block); end
  def currency; end
  def each(*args, &block); end
  def initialize(input, currency = nil, options = nil); end
  def input; end
  def last(*args, &block); end
  def options; end
  def parse; end
  def range?; end
  def self.parse(input, currency = nil, options = nil); end
  def split_list; end
  def split_range; end
  extend Forwardable
  include Enumerable
end
